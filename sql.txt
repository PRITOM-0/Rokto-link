-- sql/blood_donation.sql
-- This SQL script creates the 'blood_donation' database and its six tables.
-- Designed for MySQL, compatible with XAMPP's phpMyAdmin.

-- -----------------------------------------------------
-- 1. Create the Database
-- -----------------------------------------------------
CREATE DATABASE IF NOT EXISTS `blood_donation`;
USE `blood_donation`;

-- -----------------------------------------------------
-- 2. Table Structure for `users`
-- Stores general user account information, including login credentials and user type.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `users` (
  `user_id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(50) NOT NULL UNIQUE,
  `password` VARCHAR(255) NOT NULL, -- Storing hashed passwords
  `email` VARCHAR(100) NOT NULL UNIQUE,
  `user_type` ENUM('donor', 'recipient', 'admin') NOT NULL,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------
-- 3. Table Structure for `donors`
-- Holds specific information about users who register as donors.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `donors` (
  `donor_id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL UNIQUE, -- Foreign Key to users table
  `full_name` VARCHAR(100) NOT NULL,
  `date_of_birth` DATE NOT NULL,
  `gender` ENUM('Male', 'Female', 'Other') NOT NULL,
  `blood_group` ENUM('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-') NOT NULL,
  `contact_number` VARCHAR(20) NOT NULL,
  `address` TEXT NOT NULL,
  `city` VARCHAR(50) NOT NULL,
  `state` VARCHAR(50) NOT NULL,
  `last_donation_date` DATE NULL, -- Can be NULL if never donated
  `is_eligible` BOOLEAN DEFAULT TRUE, -- Indicates if the donor is currently eligible
  PRIMARY KEY (`donor_id`),
  FOREIGN KEY (`user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------
-- 4. Table Structure for `recipients`
-- Stores details for users who register as recipients.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `recipients` (
  `recipient_id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL UNIQUE, -- Foreign Key to users table
  `full_name` VARCHAR(100) NOT NULL,
  `date_of_birth` DATE NOT NULL,
  `gender` ENUM('Male', 'Female', 'Other') NOT NULL,
  `blood_group` ENUM('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-') NOT NULL, -- Required blood group
  `contact_number` VARCHAR(20) NOT NULL,
  `address` TEXT NOT NULL,
  `city` VARCHAR(50) NOT NULL,
  `state` VARCHAR(50) NOT NULL,
  `medical_condition` TEXT NULL, -- Any relevant medical conditions
  PRIMARY KEY (`recipient_id`),
  FOREIGN KEY (`user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------
-- 5. Table Structure for `events`
-- Manages information about blood donation events or drives.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `events` (
  `event_id` INT NOT NULL AUTO_INCREMENT,
  `event_name` VARCHAR(100) NOT NULL,
  `event_date` DATE NOT NULL,
  `location` TEXT NOT NULL,
  `description` TEXT NULL,
  `organizer_id` INT NULL, -- Foreign Key to users table (admin who organized it)
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`event_id`),
  FOREIGN KEY (`organizer_id`) REFERENCES `users`(`user_id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------
-- 6. Table Structure for `donations`
-- Records details of each blood donation made.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `donations` (
  `donation_id` INT NOT NULL AUTO_INCREMENT,
  `donor_id` INT NOT NULL, -- Foreign Key to donors table
  `event_id` INT NULL, -- Foreign Key to events table (can be NULL if not part of an event)
  `donation_date` DATE NOT NULL,
  `blood_group` ENUM('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-') NOT NULL,
  `quantity_ml` INT NOT NULL,
  `status` ENUM('completed', 'pending', 'cancelled') NOT NULL DEFAULT 'completed',
  `notes` TEXT NULL,
  PRIMARY KEY (`donation_id`),
  FOREIGN KEY (`donor_id`) REFERENCES `donors`(`donor_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (`event_id`) REFERENCES `events`(`event_id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- -----------------------------------------------------
-- 7. Table Structure for `medical_records`
-- Stores medical information relevant to donors' eligibility and health.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `medical_records` (
  `record_id` INT NOT NULL AUTO_INCREMENT,
  `donor_id` INT NOT NULL, -- Foreign Key to donors table
  `record_date` DATE NOT NULL,
  `hemoglobin_level` DECIMAL(4,2) NULL, -- e.g., 14.5
  `blood_pressure` VARCHAR(20) NULL, -- e.g., '120/80'
  `diseases_history` TEXT NULL,
  `medications` TEXT NULL,
  `eligibility_status` ENUM('Eligible', 'Temporarily Deferred', 'Permanently Deferred') NOT NULL,
  `notes` TEXT NULL,
  `recorded_by` INT NULL, -- Foreign Key to users table (admin who recorded it)
  PRIMARY KEY (`record_id`),
  FOREIGN KEY (`donor_id`) REFERENCES `donors`(`donor_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (`recorded_by`) REFERENCES `users`(`user_id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Optional: Add some initial data for testing (e.g., an admin user)
-- INSERT INTO `users` (`username`, `password`, `email`, `user_type`) VALUES
-- ('admin', '$2y$10$92hF.W.L.B.p.A.z.F.x.X.Y.Z.0.1.2.3.4.5.6.7.8.9.0', 'admin@example.com', 'admin');
-- (Replace the hashed password with a real hash for 'password' or 'adminpass')
