-- Create Database if it doesn't exist
CREATE DATABASE IF NOT EXISTS blood_donation_db;
USE blood_donation_db;


-- Table for Donors
CREATE TABLE IF NOT EXISTS donors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone VARCHAR(20),
    blood_group ENUM('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-') NOT NULL,
    last_donation_date DATE,
    address TEXT,
    city VARCHAR(50),
    state VARCHAR(50),
    zip_code VARCHAR(10),
    is_available BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table for Recipients
CREATE TABLE IF NOT EXISTS recipients (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone VARCHAR(20),
    blood_group ENUM('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-') NOT NULL,
    reason TEXT, -- Reason for needing blood
    hospital_name VARCHAR(100),
    city VARCHAR(50),
    state VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table for Blood Requests
-- Linked to recipients table
CREATE TABLE IF NOT EXISTS blood_requests (
    id INT AUTO_INCREMENT PRIMARY KEY,
    recipient_id INT, -- Foreign key to recipients table
    blood_group ENUM('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-') NOT NULL,
    units_needed INT NOT NULL,
    request_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('pending', 'fulfilled', 'urgent', 'cancelled') DEFAULT 'pending',
    FOREIGN KEY (recipient_id) REFERENCES recipients(id) ON DELETE SET NULL
);

-- Table for Blood Inventory (Blood Bank Stock)
CREATE TABLE IF NOT EXISTS blood_inventory (
    id INT AUTO_INCREMENT PRIMARY KEY,
    blood_group ENUM('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-') NOT NULL UNIQUE,
    available_units INT NOT NULL DEFAULT 0,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Table for Donation History
-- Records each successful donation event
CREATE TABLE IF NOT EXISTS donation_history (
    id INT AUTO_INCREMENT PRIMARY KEY,
    donor_id INT NOT NULL,
    donation_date DATE NOT NULL,
    blood_group ENUM('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-') NOT NULL,
    units_donated INT NOT NULL DEFAULT 1, -- Typically 1 unit per donation
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (donor_id) REFERENCES donors(id) ON DELETE CASCADE
);

-- Create a VIEW for Urgent Blood Needs
-- This view simplifies querying for urgent blood requests
CREATE OR REPLACE VIEW v_urgent_blood_needs AS
SELECT
    br.id AS request_id,
    r.name AS recipient_name,
    br.blood_group,
    br.units_needed,
    br.request_date,
    br.status,
    r.hospital_name,
    r.phone AS recipient_phone
FROM
    blood_requests br
JOIN
    recipients r ON br.recipient_id = r.id
WHERE
    br.status = 'urgent'
ORDER BY
    br.request_date DESC;

-- Create a TRIGGER to update blood_inventory when a new donation is recorded
DELIMITER //
CREATE TRIGGER trg_update_inventory_on_donation
AFTER INSERT ON donation_history
FOR EACH ROW
BEGIN
    INSERT INTO blood_inventory (blood_group, available_units)
    VALUES (NEW.blood_group, NEW.units_donated)
    ON DUPLICATE KEY UPDATE available_units = available_units + NEW.units_donated, last_updated = CURRENT_TIMESTAMP;

    -- Also update the donor's last_donation_date
    UPDATE donors
    SET last_donation_date = NEW.donation_date
    WHERE id = NEW.donor_id;
END;
//
DELIMITER ;

-- Insert initial data for blood inventory if not exists
INSERT IGNORE INTO blood_inventory (blood_group, available_units) VALUES
('A+', 0), ('A-', 0), ('B+', 0), ('B-', 0), ('AB+', 0), ('AB-', 0), ('O+', 0), ('O-', 0);


INSERT INTO donors (name, email, phone, blood_group, last_donation_date, city, is_available) VALUES
('John Doe', 'john.doe@example.com', '123-456-7890', 'O+', '2024-06-15', 'Dhaka', TRUE),
('Jane Smith', 'jane.smith@example.com', '987-654-3210', 'A-', '2024-07-01', 'Dhaka', TRUE),
('Alice Johnson', 'alice.j@example.com', '555-123-4567', 'B+', '2024-05-20', 'Chittagong', TRUE),
('Bob Williams', 'bob.w@example.com', '111-222-3333', 'AB+', '2024-07-10', 'Dhaka', FALSE);

INSERT INTO recipients (name, email, phone, blood_group, reason, hospital_name, city) VALUES
('Baby Alex', 'alex.r@example.com', '111-222-3333', 'O-', 'Emergency surgery', 'City Hospital', 'Dhaka'),
('Mr. Sharma', 'sharma.r@example.com', '444-555-6666', 'AB+', 'Transfusion for chronic illness', 'General Hospital', 'Chittagong');

INSERT INTO blood_requests (recipient_id, blood_group, units_needed, status) VALUES
((SELECT id FROM recipients WHERE name = 'Baby Alex'), 'O-', 2, 'urgent'),
((SELECT id FROM recipients WHERE name = 'Mr. Sharma'), 'AB+', 1, 'pending');

INSERT INTO donation_history (donor_id, donation_date, blood_group, units_donated) VALUES
((SELECT id FROM donors WHERE name = 'John Doe'), '2024-06-15', 'O+', 1),
((SELECT id FROM donors WHERE name = 'Jane Smith'), '2024-07-01', 'A-', 1),
((SELECT id FROM donors WHERE name = 'Alice Johnson'), '2024-05-20', 'B+', 1),
((SELECT id FROM donors WHERE name = 'Bob Williams'), '2024-07-10', 'AB+', 1);

-- Note: The trigger `trg_update_inventory_on_donation` will automatically update `blood_inventory`
-- and `donors.last_donation_date` when `donation_history` records are inserted.
